
CIS 520 - Programming Project #1

                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Branden Brown: bbrown14@ksu.edu
Harold Vilander: haroldvilander@ksu.edu
Sam Eichorst: sleichorst@ksu.edu
...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.

https://github.com/ryantimwilson/Pintos-Project-1/tree/master/src


                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----/

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to Thread Struct in thread.h
struct semaphore timer_sema;        /* used for blocking threads with a timer*/
    int64_t wakeup_time;                /* the time in ticks when a thread should wake up*/
    struct list_elem sleeping_elem;     /* a list element for the sleeping threads list*/  
    int base_priority;                  /* the priority of the thread before it has been modified by lock donation */
    struct list lock_list;              /* list of locks being held by this thread */
    struct lock * blocking_lock;        /* the lock this thread is currently waiting on. if this thread is not waiting on a lock, should be null */


Added in timer.h
struct list sleeping_threads;      /* Threads that are blocked for timers, maybe should be a static */


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.
When a thread calls timer_sleep(), it gives us the number of ticks 
that it wants to sleep for. We use this and the current time to 
determine what tick the thread should wake up on. We then add the
thread to a list we keep of sleeping threads, and sort the list by
order of when it should wake up, with threads that will wake up 
sooner toward the front of the list. We then call sema_down() on that 
thread's semaphore, which puts the thread thread to sleep. In 
timer_interrupt, we check if any sleeping threads are ready to wake 
up, and if there are, we call sema_up() on that thread's semaphore.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

In the timer interrupt we call our function check_sleeping_thread we try to minimize what needs done. We record the current time and go through the sleeping threads only until we find one that doesn't need woken up. 

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
Each call will independently put the thread on the waiters list and sort that list. We also disable interrupts during adding to the list and sorting the list. 

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

In our preemption scheme we disable interrupts before we try any preemption. When we do try to preempt we make sure we are not in an interrupt (or wait for a currently running interrupt to finish) before yielding the CPU. Since the timer interrupt is an interrupt (duh) this should mean we avoid race conditions.


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?
This is better than busy waiting since each thread will get off of the ready list and not waste time on the CPU while it sleeps.



             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to lock struct in synch.h
    struct list_elem elem;      /* Used to store on list of held locks for a thread */
    int highest_waiter_priority;/* the priority of waiter thread with highest priority */

>> B2: Explain the data structure used to track priority donation.
	The lock struct has a list_elem which is used to keep of the
Waiters for that lock, and also a highest_water_priority property which
Keeps track of the highest priority of the thread that is waiting on that lock.
This allows up to donate properly so we can preempt whatever thread holds this.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
We sort the list of waiters on semaphores before we wake up sleeping 
threads. Since locks are built on semaphores, this also ensures that
threads are woken up from locks in the correct order. For condition 
variables, we sort the list of semaphores associated with the condition
variable to ensure the one associated with the highest priority thread
is woken up first.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
When a high priority thread tries to acquire a lock that a lower priority
thread holds, we check if the priority of the low priority thread is lower
than that of the highest priority thread waiting on that lock. If this is
the case, we set the low priority thread's priority to that of the highest
priority thread waiting on the lock.
In order to handle nested donation, we then check if the low priority 
thread is also waiting on a lock. If so, we recursively call the donation
function on the lock the lower priority thread is waiting on. This then 
repeats the same process as when we initially acquire a lock.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
When a lock is released, the thread's priority is reset to the higher 
of its base priority(without donation) or the priority of of the highest
priority thread waiting on a lock that the thread still holds.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race? 
After setting the priority of a thread to something higher, and if it needs to be preempted, there could be a potential race condition when yielding the CPU to this new process if there is an interrupt running and we are trying to kick it off the CPU. We avoid this by only trying to yield the CPU if we are not currently in an interrupt, if we are we wait for it to be done and then yield.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
Another design we had considered was to have donee threads keep track of what threads have donated to them and then when locks are released to return donations. We abandoned this because it didn’t allow us to keep track of what threads donated for what locks, so when we released a lock we returned all donations instead of just the ones for that lock. Our current design avoids this issue.
Also, when a thread donated to a thread we actually decreased the priority of the donating thread and blocked it. This was unnecessary as the thread is blocked and not on the ready list anyway so we didn’t have to worry about that. It only added complexity to the lock_release and related functions with no efficiency or algorithm requirements.

              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?


