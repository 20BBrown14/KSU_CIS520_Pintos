old_process_wait

 /*P2*/
  struct list *children_list = &(thread_current()->children); //children for current thread
  struct list_elem *cur_elem;
  struct thread *parent_thread = thread_current(); //The current thread, the parent
/*
  printf("List Begin Parent Thread head %p\n", &children_list->head);
  printf("List Begin Parent Thread prev %p\n", list_begin(children_list)->prev);
  printf("List Begin Parent Thread next %p\n", list_begin(children_list)->next);
  printf("List Begin Parent Thread tail %p\n", &children_list->tail);
  */
  //void * whateverhtefuckyouwant = 0x1;
  //ASSERT(whateverhtefuckyouwant != NULL);
  //struct list *real_list = list_entry(list_begin(children_list)->prev, struct list, head);

  //printf("List Begin Parent Thread head prev %p\n", &children_list->head.prev);
  //printf("List Begin Parent Thread head %p\n", list_begin(children_list)->prev);
  //printf("Current Thread name: %s\n", parent_thread->name);
  
  struct child* cp = get_child_process(child_tid);

  //for( cur_elem = list_begin(&parent_thread->children); cur_elem != list_end(&parent_thread->children); cur_elem = list_next(cur_elem)) //Loop through children list
  for( cur_elem = list_begin(children_list); cur_elem != list_end(children_list); cur_elem = list_next(cur_elem)) //Loop through children list
  {
    //ASSERT ((cur_elem != NULL && cur_elem->prev == NULL && cur_elem->next != NULL)|| (cur_elem != NULL && cur_elem->prev != NULL && cur_elem->next != NULL));
    struct child *cur_child = list_entry(cur_elem, struct child, child_elem); //Get child struct from current child list elem loop iteration
    //printf("child_tid=%d ; cur_child->child_tid=%d\n", child_tid, cur_child->child_tid);
    //printf("cur_child -> exit_status: %d\n", cur_child->exit_status);
    //printf("Thread we found: %s\n", "testing");
    if(child_tid == cur_child->child_tid) //Is this the child we are looking for?
    {
      //printf("Name: %d\n", parent_thread->name);
      if(cur_child->t != NULL && cur_child->t->pagedir != NULL) //Is this child still alive?
      {
        /*child is alive, wait for child to exit*/
        parent_thread->child_waiting_on = child_tid; /*set the child we are waiting on*/
        //printf("SLEEPING\n");
        sema_down(&parent_thread->child_wait_sema); //Sleep the parent thread
        parent_thread->child_waiting_on = TID_ERROR; /* clear the child tid, since no longer waiting*/

      }
      /* child might have exited before we called wait */
      /* we need to remove the child before returning */
      list_remove(cur_elem);
      /* in all cases we return child exit status */  
      return cur_child->exit_status; 
    }
  }
  /* child_tid was never a child or we have waited and */
  /* removed it from the list, return -1 */
  return -1;